/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestColorPicker.java
 *
 * Created on 18-06-2011, 20:45:11
 */
package test;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import com.sun.org.apache.bcel.internal.generic.NEW;

import dk.dtu.imm.c02343.grp4.imageprocessing.imageprocessing.Thresholds;
import dk.dtu.imm.c02343.grp4.imageprocessing.imagesource.IImageSource;
import dk.dtu.imm.c02343.grp4.imageprocessing.imagesource.ImageFile;
import dk.dtu.imm.c02343.grp4.imageprocessing.testimageprocessing.ImagePanel;

/**
 *
 * @author Terkel
 */
public class TestColorPicker extends javax.swing.JFrame {

    /** Creates new form TestColorPicker */
    public TestColorPicker() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        imagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Raw Image"));
        imagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imagePanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );

        jToggleButton1.setText("jToggleButton1");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("jLabel1");
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1))
                .addGap(39, 39, 39)
                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(195, Short.MAX_VALUE)
                .addComponent(jToggleButton1)
                .addGap(85, 85, 85)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imagePanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePanelMousePressed
    
    	int[] rgb = pickColorFromImage(sourceImg);
    	if(jToggleButton1.isSelected())
    	jLabel1.setBackground(new Color(rgb[0], rgb[1], rgb[2]));
    }//GEN-LAST:event_imagePanelMousePressed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
    	test();
    	if(jToggleButton1.isSelected())
    	setCursor(new Cursor(CROSSHAIR_CURSOR));
    	else setCursor(new Cursor(DEFAULT_CURSOR));
    	
    	
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    public static BufferedImage getImage()
	{
    	sourceImg =null;
    	
		try
		{
			sourceImg = ImageIO.read(new URL("http://www.eecs.berkeley.edu/~loarie/test.colors.gif"));
		} catch (MalformedURLException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sourceImg;
	}
    
    private static BufferedImage sourceImg;
    public static void test()
	{
    	
				
	}
    	
    public int[] pickColorFromImage(BufferedImage image)
    {
    	int[] rgb = new int[3];
    	int rgbVal;
    	int[] minVals = new int[3];
    	int[] maxVals = new int[3];
    	int THRESHOLDS_BUFFER_SIZE = 15;
    	Point p = imagePanel.getMousePosition();    	
    	System.out.println("imagePanel "+imagePanel);
    	
    	rgbVal = image.getRGB((int)p.getX(), (int)p.getY());
    	
    	System.out.println("RGB val "+rgbVal);
    	
    	// Beregn RGB-komponenter vha. bit-shifting og bitwise AND
    	//fra ImageProcessor2.java (Per)
    	rgb[2] = rgbVal & 0xFF;
    	rgb[1] = (rgbVal >> 8) & 0xFF;
    	rgb[0] = (rgbVal >> 16) & 0xFF;

//    	//Sanity check på RGB værdierne
//    	for (int i = 0; i < rgb.length; i++)
//    	{
//    		if ( rgb[i]+THRESHOLDS_BUFFER_SIZE>256)
//    			maxVals[i] = 256;
//    		else if  (rgb[i]-THRESHOLDS_BUFFER_SIZE < 0)
//    			minVals[i] = 0;
//    		else {
//    			maxVals[i]=rgb[i]+THRESHOLDS_BUFFER_SIZE;
//    			minVals[i]=rgb[i]-THRESHOLDS_BUFFER_SIZE;
//    		}
//    	}
//    	Thresholds t = new Thresholds(minVals[0], minVals[1], minVals[2], maxVals[0], maxVals[1],maxVals[2]);    	
		return  rgb;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TestColorPicker().setVisible(true);
            }
        });
     
        BufferedImage s_image = getImage();
    	// Opret JFrame samt panel til input-billede
        ImagePanel srcImgPanel = new ImagePanel(s_image);
        imagePanel.add(srcImgPanel);
        srcImgPanel.setImage(s_image);
        srcImgPanel.repaint();	
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    static javax.swing.JPanel imagePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
